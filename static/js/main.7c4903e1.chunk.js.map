{"version":3,"sources":["component/header/Head.js","component/header/Input.js","component/header/Add.js","component/output/Output.js","container/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Head","props","Input","id","type","className","placeholder","onChange","event","takeInput","Add","onClick","createList","save","Output","list","map","item","key","ev","toggle","value","preventDefault","deletItem","ToDoList","state","newItem","this","target","console","log","alert","Math","random","checked","push","document","querySelector","setState","updatedList","filter","ele","localStorage","json","JSON","stringify","loadListFromLocalStorage","listArry","parse","arr","listObj","tagName","classList","obj","bind","saveListToLocalStorage","load","deletList","toggleList","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c4903e1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './header.css';\r\nexport const Head = (props) =>{\r\n    return(<>\r\n    <h1>My To Do List...</h1>\r\n    </>)\r\n}","import React from 'react';\r\nimport './header.css';\r\nexport const Input = (props) => {\r\n    return (\r\n        <>\r\n            <input id='txt' type='text' className='form-control' placeholder='Title....' onChange={(event) => {\r\n                props.takeInput('newItem',event)\r\n            }} />\r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport './header.css';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nexport const Add = (props) => {\r\n    return (<>\r\n        <button className='btn btn-primary size' onClick={props.createList}>Add</button>\r\n        <button className='btn btn-primary size' onClick={props.save}>Save</button>\r\n        {/* <button className='btn btn-primary size' onClick={props.load}>Load</button> */}\r\n    </>)\r\n}","import React from 'react';\r\nimport '../output/output.css';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nexport const Output = (props) => {\r\n  return (\r\n    <>\r\n      <ul className=\"list-group list-group-flush\" id=\"ul\">\r\n        {props.list.map(item => {\r\n          if(item['checked'] == true)\r\n          {\r\n            return(\r\n              <li key={item.id} className=\"list-group-item d-flex justify-content-between align-items-center checked\"\r\n              onClick={(ev) => {\r\n              props.toggle(ev, item);\r\n              }}>\r\n              {item.value}\r\n              <button className='btn cross' onClick={(event) => {\r\n                event.preventDefault();\r\n                props.deletItem(item.id);\r\n              }}>X</button>\r\n            </li>\r\n            )\r\n          }\r\n          else{\r\n          return (\r\n            <li key={item.id} className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              onClick={(ev) => {\r\n              props.toggle(ev, item);\r\n              }}>\r\n              {item.value}\r\n              <button className='btn cross' onClick={(event) => {\r\n                event.preventDefault();\r\n                props.deletItem(item.id);\r\n              }}>X</button>\r\n            </li>\r\n          );\r\n          }\r\n        })}\r\n      </ul>\r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport { Head } from '../component/header/Head';\r\nimport { Input } from '../component/header/Input';\r\nimport { Add } from '../component/header/Add';\r\nimport { Output } from '../component/output/Output';\r\nimport '../App.css';\r\nexport class ToDoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { newItem: '', list: [] };\r\n    }\r\n\r\n    // Taking input values from input component\r\n    takeInput(key, event) {\r\n        this.state[key] = event.target.value;\r\n        console.log()\r\n    }\r\n\r\n    //Add new single item after click add button \r\n    createList() {\r\n        if (this.state.newItem === '') {\r\n            alert('Please enter tast to do...');\r\n        }\r\n        else {\r\n            const newItem = {\r\n                id: 1 + Math.random(),\r\n                value: this.state.newItem,\r\n                checked: false\r\n            }\r\n            this.state.list.push(newItem);\r\n            document.querySelector('#txt').value = '';\r\n            this.setState({ newItem: '' });\r\n        }\r\n    }\r\n\r\n    // Delete selected single item \r\n    deletList(id) {\r\n        let updatedList = this.state.list.filter(ele => {\r\n            return ele.id !== id;\r\n        });\r\n        this.setState({ ...this.state.list, list: updatedList });\r\n    }\r\n\r\n    // Saving data to local storage\r\n    saveListToLocalStorage() {\r\n        if (localStorage) {\r\n            let json = JSON.stringify(this.state.list);\r\n            localStorage.list = json;\r\n            console.log(localStorage);\r\n        }\r\n        else {\r\n            alert('Your browser is outdated......');\r\n        }\r\n    }\r\n\r\n    //To do list will display when screen open automatic \r\n    componentWillMount(){\r\n        this.loadListFromLocalStorage();\r\n    }\r\n\r\n    //Load items from local Storage \r\n    loadListFromLocalStorage() {\r\n        if (localStorage) {\r\n            if (localStorage.list) {\r\n                this.state.list = [];\r\n                let listArry = JSON.parse(localStorage.list);\r\n                for (let ele of listArry) {\r\n                    this.state.list.push(ele);\r\n                }\r\n                this.setState({ arr: '' })\r\n            }\r\n            else {\r\n                alert('Nothing to load');\r\n            }\r\n        }\r\n        else {\r\n            alert('Your browser is outdated.....');\r\n        }\r\n    }\r\n\r\n    //Toggle item (for done or left last) \r\n    toggleList(event, listObj) {\r\n        var id = listObj.id;\r\n        if (event.target.tagName === 'LI') {\r\n            event.target.classList.toggle('checked');\r\n        }\r\n        for(let ele of this.state.list)\r\n        {\r\n            for(let obj in ele){\r\n            if(ele[obj] == id)\r\n            {\r\n               ele['checked'] = !ele['checked'];\r\n            }}\r\n        }\r\n    }\r\n    render() {\r\n        return (<>\r\n            <div className='header form-group'>\r\n                <center>\r\n                    <Head />\r\n                    <Input takeInput={this.takeInput.bind(this)} />\r\n                    <Add createList={this.createList.bind(this)} save={this.saveListToLocalStorage.bind(this)} load={this.loadListFromLocalStorage.bind(this)} />\r\n                </center>\r\n            </div>\r\n            <div>\r\n                <Output list={this.state.list} deletItem={this.deletList.bind(this)} toggle={this.toggleList.bind(this)} />\r\n            </div>\r\n        </>\r\n        )\r\n    }\r\n}","import React from 'react'\nimport {ToDoList} from './container/ToDoList';\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {}; \n  }\n  render(){\n    return(\n      <>\n        <ToDoList/>\n      </>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}